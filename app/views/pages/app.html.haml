#entity_and_account
  #notifications
    <!-- ko foreach: notifications -->
    %div{ data: { bind: "css: type, html: message" }}
    <!-- /ko -->
  #entity_container
    .actions
      %a.small_add_button{ href: "#", data: { bind: "click: newEntity" }}
      %a.small_edit_button{ href: "#", data: { bind: "click: editSelectedEntity" }}
      %a.small_delete_button{ href: "#", data: { bind: "click: removeSelectedEntity" }}
    %select{ data: { bind: "options: entities, optionsText: 'name', value: selectedEntity" } }
  #account_container{ data: { bind: "with: selectedEntity()" }}
    %table.list#accounts_table{ cellspacing: 0, cellpadding: 0}
      %tr
        %th Name
        %th Balance
        %th
          %a.small_header_add_button{ href: '#', title: 'Click here to add a new account.', data: { bind: "click: newAccount" } }Add
      <!-- ko foreach: groupedAccounts -->
      %tr{ data: { bind: "css: cssClass" }}
        %td{ data: { bind: "click: display" }}
          %span{ data: { bind: "text: name, css: cssClass" }}
        %td.number_column{ data: { bind: "text: formattedBalanceWithChildren,click: display" }}
        %td.action_cell
          %a.small_edit_button{ data: { bind: "visible: canEdit(), click: edit" }, href: '#', title: 'Click here to edit this account.' } Edit
          %a.small_delete_button{ data: { bind: "visible: canDestroy(), click: destroy" }, href: '#', title: 'Click here to delete this account.' } Delete
      <!-- /ko -->
#transactions
  %ul{ data: { bind: "foreach: displayedAccounts" }}
    %li
      %a{ data: { bind: "text: name, attr: {href: '#account_' + id() }" }}
      %span.ui-icon.ui-icon-close{ role: 'presentation', data: { bind: "click: undisplay" }} Remove Tab
  <!-- ko foreach: displayedAccounts -->
  %div{ data: { bind: "attr: {id: 'account_' + id() }" }}
    %table.register{ cellspacing: 0, cellpadding: 0}
      %tr
        %th.number_column Date
        %th Description
        %th Account
        %th.boolean_column Rec.
        %th.number_column Amount
        %th.number_column Balance
        %th &nbsp;
      <!-- ko foreach: transaction_items -->
      %tr.attachment_drop{ data: { bind: "attr: {'data-id': id}, css: $index() % 2 == 0 ? 'table_row' : 'alt_table_row'" }}
        %td.number_column{ data: { bind: "inlineDateEditor: formattedTransactionDate, editorClass: 'date_field'" }}
        %td{ data: { bind: "inlineEditor: description" }}
        %td
          %span.ui-icon.account-toggle{ data: { bind: "click: toggleDetails, css: toggleCss" }} &nbsp;
          %span{ data: { bind: "inlineEditor: otherAccountPath, editorClass: 'account_field', autocompleteLookup: getAccountPaths" }}
        %td.boolean_column{ data: { bind: "text: reconciled() ? 'X' : ''" }}
        %td.number_column{ data: { bind: "inlineEditor: formattedPolarizedAmount, editorClass: 'number_field'" }}
          %span.validation_message{ data: { bind: "visible: polarizedAmount.hasError, text: polarizedAmount.errorMessage" }}
        %td.number_column{ data: { bind: "text: formattedBalance" }}
        %td.action_cell
          %a.small_delete_button{ href: '#', title: 'Click here to delete this transaction.', data: { bind: "click: destroy" }} Delete
          %a.small_attachments_button{ href: '#', title: 'Click here to show or hide the attachment.', data: { bind: "click: toggleAttachmentsVisible" }}
          %sub{ data: { bind: "text: attachments().length" }}
          .attachment_container{ data: { bind: "visible: attachmentsVisible" }}
            %table.nested_table{ cellspacing: 0, cellpadding: 0 }
              %tr
                %th Name
                %th Type
                %th &nbsp;
              <!-- ko foreach: attachments -->
              %tr
                %td{ data: { bind: "text: name" } }
                %td{ data: { bind: "text: content_type" } }
                %td.action_cell
                  %a.small_show_button{ href: '#', title: 'Click here to view the attachment.', data: { bind: "click: show" } }
                  %a.small_delete_button{ href: '#', title: 'Click here to delete the attachment.', data: { bind: "click: function() { destroy(); }" }}
              <!-- /ko -->
            .actions
              %a.small_add_button{ href: '#', title: 'Click here to add an attachment.', data: { bind: "click: newAttachment" }}

      %tr{ data: { bind: "if: showDetails" }}
        %td.detail_cell{ colspan: 6, data: { bind: "with: transaction" }} 
          %table.detail{cellpadding: 0, cellspacing: 0}
            %tr
              %th Account
              %th.number_column Debit
              %th.number_column Credit
              %th &nbsp;
            <!-- ko foreach: items-->
            %tr
              %td
                %input{ type: 'text', data: { bind: "autocomplete: accountPath, source: getAccountPaths" }}
              %td.number_column
                %input.number_field{ type: 'text', data: { bind: "value: formattedDebitAmount" }}
              %td.number_column
                %input.number_field{ type: 'text', data: { bind: "value: formattedCreditAmount" }}
              %td.action_cell
                %a.small_delete_button{ href: '#', title: 'Click here to delete this item.', data: { bind: "click: remove" }}
            <!-- /ko -->
            %tr
              %td
                %a.small_add_button{ href: '#', data: { bind: "click: addTransactionItem" }} Add
              %td.number_column{ data: { bind: "text: formattedDebitAmount" }}
              %td.number_column{ data: { bind: "text: formattedCreditAmount" }}
              %td &nbsp;
        %td{ data: { bind: "with: transaction" }}
          %button.small_save_button{ data: { bind: "click: save" }, title: 'Click here to save the transaction.'}
            Save
      <!-- /ko -->

      %tr{ data: { bind: "with: newTransactionItem"}}
        %td.number_column
          %input.date_field{ type: 'text', placeholder: 'Transaction date', data: { bind: "datePicker: formattedTransactionDate" } }
        %td
          %input{ type: 'text', placeholder: 'Description', data: { bind: "value: description" } }
        %td
          %input{ type: 'text', placeholder: 'Account', data: { bind: "autocomplete: otherAccountPath, source: getAccountPaths" } }
        %td &nbsp;
        %td
          %input.number_field{ type: 'text', placeholder: 'Amount', data: { bind: "value: amount" } }
        %td &nbsp;
        %td
          %button.small_save_button{ title: 'Click here to save the new transaction.', data: { bind: "click: saveNewTransactionItem" }} Save
  .validation_summary{ data: { bind: "visible: newTransactionItem.isInvalid" }}
    %ul{ data: { bind: "with: newTransactionItem" }}
      %li{ data: { bind: "visible: transaction_date.hasError, text: transaction_date.errorMessage" }}
      %li{ data: { bind: "visible: description.hasError, text: description.errorMessage" }}
      %li{ data: { bind: "visible: account_id.hasError, text: account_id.errorMessage" }}
      %li{ data: { bind: "visible: amount.hasError, text: amount.errorMessage" }}
  <!-- /ko -->

<!-- Entity Form -->
#entity_form.dialog{ title: 'Entity', data: { bind: "with: editEntity"}}
  %form
    %div
      %label{ for: 'entity_name' } Name
      %span.validation_message{ data: { bind: "visible: name.hasError, text: name.errorMessage" }}
      %br
      %input#entity_name{ type: 'text', data: { bind: "value: name" }}

<!-- Account Form -->
#account_form.dialog{ title: 'Account', data: { bind: "with: editAccount"}}
  %form
    %div
      %label{ for: 'account_account_type' } Account type
      %br
      %select#account_account_type{ data: { bind: "options: $root.accountTypes, value: account_type" }}
    %div
      %label{ for: 'account_parent' } Parent
      %br
      %select#account_parent{ data: { bind: "options: availableParents, optionsCaption: 'None', optionsText: function(a) { return a.name(); }, optionsValue: function(a) { return a.id; }, value: parent_id" }}
    %div
      %label{ for: 'account_name' } Name
      %span.validation_message{ data: { bind: "visible: name.hasError, text: name.errorMessage" }}
      %br
      %input#account_name{ type: 'text', data: { bind: "value: name" }}

<!-- Attachment Form -->
#attachment_form.dialog{ title: 'Attachment', data: { bind: "with: editAttachment"}}
  %form
    %div
      %label{ for: 'attachment_name' } Name
      %br
      %input#attachment_name{ data: { bind: "value: name" }}
    %div
      %label{ for: 'attachment_file' } File
      %br
      %input#attachment_file{ type: 'file', data: { bind: "file: raw_file" }}

:javascript  
  $.event.props.push("dataTransfer");
  $(function() {
    // Initialize and bind the view model
    app = new MoneyApp();
    ko.applyBindings(app);
    
    // Initialize the tab panel and refresh when new tabs are added
    var tabs = $('#transactions').tabs();
    app.displayedAccounts.subscribe(function(accounts) {
      tabs.tabs('refresh');
      window.setTimeout(bindAttachmentDrops, 500);
    });

    function bindAttachmentDialogs() {
      $('.attachment_container').dialog({
        autoOpen: false
      });
    }

    function bindAttachmentDrops() {
      var events = "dragenter dragstart dragend dragover dragleave drag drop";
      var drops = tabs.find(".attachment_drop");
      drops.off(events, handleAttachmentDragAndDrop);
      drops.on(events, handleAttachmentDragAndDrop);
    }

    function handleAttachmentDragAndDrop(e, ui) {
      e.preventDefault();
      if (e.type == "drop") {
        $(this).removeClass("attachment_droppable");
        handleAttachmentDrop(e, $(this));
      } else if (e.type == "dragenter") {
        $(this).addClass("attachment_droppable");
      } else if (e.type == "dragleave") {
        $(this).removeClass("attachment_droppable");
      }
    }

    function handleAttachmentDrop(e, row) {
      var transactionItemId = row.data("id");
      transactionItemId = parseInt(transactionItemId);
      var transaction_item = _.find(app.selectedAccount().transaction_items(), function(item) { 
        return item.id() == transactionItemId;
      });
      var transaction = transaction_item.transaction_item.transaction;
      var attachment = new AttachmentViewModel(null, transaction);
      attachment.raw_file(e.dataTransfer.files[0]);
      attachment.save();
    }

    // Select the tab based on a click on an account in the account list
    app.selectedAccountIndex.subscribe(function(index) {
      $('#transactions').tabs('option', 'active', index);
    });

    // global method delegates
    window.getAccountPaths = function(request, callback) {
      return app.getAccountPaths(request, callback);
    };

    window.saveNewTransactionItem = function(item) {
      item.save();
      window.setTimeout(function() {
        $('.date_field').focus();
      }, 500);
    }

    // Initialize the entity form
    app.editEntity.subscribe(function(entity) {
      if (entity == null) {
        $('#entity_form').dialog('close');
      } else {
        $('#entity_form').dialog('open');
      }
    });

    $('#entity_form').dialog({ 
      autoOpen: false, 
      modal: true,
      buttons: {
        Save: function() {
          app.editEntity().save(function() { app.editEntity(null); });
        },
        Cancel: function() {
          app.editEntity().reload(function() { app.editEntity(null); });
        }
      }
    });

    // Initialize the account form
    app.editAccount.subscribe(function(account) {
      if (account == null) {
        $('#account_form').dialog('close');
      } else {
        $('#account_form').dialog('open');
      }
    });

    $('#account_form').dialog({ 
      autoOpen: false, 
      modal: true,
      buttons: {
        Save: function() {
          app.editAccount().save(function() { app.editAccount(null); });
        },
        Cancel: function() {
          app.editAccount().reload(function() { app.editAccount(null); });
        }
      }
    });

    // Initialize the attachment form
    app.editAttachment.subscribe(function(attachment) {
      if (attachment == null) {
        $('#attachment_form').dialog('close');
      } else {
        $('#attachment_form').dialog('open');
      }
    });

    $('#attachment_form').dialog({ 
      autoOpen: false, 
      modal: true,
      buttons: {
        Save: function() {
          app.editAttachment().save(function() { app.editAttachment(null); });
        },
        Cancel: function() {
          app.editAttachment().reload(function() { app.editAttachment(null); });
        }
      }
    });

  });
