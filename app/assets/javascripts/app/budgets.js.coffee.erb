app = angular.module 'budgets', ['ui.bootstrap']

app.controller 'BudgetsController', ['$scope', '$http', '$uibModal', ($scope, $http, $uibModal) ->
  _self = this
  @budgets = []
  @selectedBuget = null
  $scope.selectedBudgetId = null

  @newBudget = ->
    _self.formBudget =
      period: "month"
      period_count: 12
    $scope.budgetFormTitle = "New budget"
    $uibModal.open {
      animation: true,
      templateUrl: 'budget-form.html',
      controller: 'BudgetFormController',
      scope: $scope
    }

  @edit = ->
    $scope.budgetFormTitle = "Edit budget"
    _self.formBudget = _.clone _self.selectedBudget
    $uibModal.open {
      animation: true,
      templateUrl: 'budget-form.html',
      controller: 'BudgetFormController',
      scope: $scope
    }

  @prepareData = ->
    {
      budget: _self.formBudget
    }
  @createBudget = ->
    data = _self.prepareData()
    $http.post("/entities/#{$scope.currentEntityId}/budgets.json", data).then (response) ->
      _self.budgets.push response.data
      _self.formBudget = null
      $scope.selectedBudgetId = response.data.id
      true
    , (error) ->
      console.log "Unable to create the new budget"
      console.log error

  @updateSelectedBudget = ->
    data = _self.prepareData()
    $http.put("/budgets/#{_self.formBudget.id}.json", data).then (response) ->
      _self.budgets = _.map _self.budgets, (b) ->
        if b.id == _self.formBudget.id
          _self.formBudget
        else
          b
      _self.formBudget = null
      true
    , (error) ->
      console.log "Unable to update the budget"
      console.log error

  $scope.saveSelectedBudget = ->
    if _self.formBudget.id
      _self.updateSelectedBudget()
    else
      _self.createBudget()

  @calendarIsOpen = false
  @openCalendar = -> @calendarIsOpen = true

  @loadBudgets = ->
    return unless $scope.currentEntityId
    $http.get("/entities/#{$scope.currentEntityId}/budgets.json").then (response) ->
      _self.budgets = response.data
      $scope.selectedBudgetId = _self.budgets[0].id if _self.budgets.length != 0
    , (error) ->
      console.log "Unable to get the budgets from the service."
      console.log error
  $scope.$watch 'currentEntityId', (_) -> _self.loadBudgets()
  $scope.$watch 'selectedBudgetId', (budgetId) ->
    _self.selectedBudget = null unless budgetId
    id = parseInt(budgetId)
    _self.selectedBudget = _.find(_self.budgets, (b) -> b.id == id)
  return
]

app.controller 'BudgetFormController', ['$scope', '$uibModalInstance', ($scope, $uibModalInstance) ->
  $scope.saveBudgetForm = ->
    $scope.saveSelectedBudget().then (succeeded) ->
      $uibModalInstance.close() if succeeded
  $scope.cancelBudgetForm = ->
    $uibModalInstance.dismiss('cancel')
  return
]

app.directive 'budgetManager', ->
  {
    restrict: 'E',
    templateUrl: '<%= asset_path('budget-manager.html') %>'
  }
