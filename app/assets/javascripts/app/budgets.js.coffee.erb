app = angular.module 'budgets', ['ui.bootstrap']

app.controller 'BudgetsController', ['$scope', '$http', '$uibModal', ($scope, $http, $uibModal) ->
  _self = this
  @budgets = []
  @selectedBuget = null
  @periods = []
  @incomeItems = []
  @expenseItems = []
  @periodsAreVisible = false
  @showPeriods = -> @periodsAreVisible = true
  @hidePeriods = -> @periodsAreVisible = false
  $scope.selectedBudgetId = null

  @new = ->
    _self.formBudget =
      period: "month"
      period_count: 12
    $scope.budgetFormTitle = "New budget"
    $uibModal.open {
      animation: true,
      templateUrl: 'budget-form.html',
      controller: 'BudgetFormController',
      scope: $scope
    }

  @edit = ->
    $scope.budgetFormTitle = "Edit budget"
    _self.formBudget = _.clone _self.selectedBudget
    $uibModal.open {
      animation: true,
      templateUrl: 'budget-form.html',
      controller: 'BudgetFormController',
      scope: $scope
    }

  @delete = ->
    $http.delete("/budgets/#{$scope.selectedBudgetId}.json").then (response) ->
      _self.budgets = _.reject(_self.budgets, (b) -> b.id == $scope.selectedBudgetId)
      if _self.budgets.length == 0
        $scope.selectedBudgetId = null
      else
        $scope.selectedBudgetId = _self.budgets[0].id
    , (error) ->
      console.log "Unable to delete the budget"
      console.log error

  @prepareData = ->
    {
      budget: _self.formBudget
    }
  @createBudget = ->
    data = _self.prepareData()
    $http.post("/entities/#{$scope.currentEntityId}/budgets.json", data).then (response) ->
      # insert at the correct position
      dates = _.map(_self.budgets, (b) -> b.start_date).reverse()
      index = _.sortedIndex(dates, response.data.start_date)
      index = dates.length - index
      _self.budgets.splice index, 0, response.data
      _self.formBudget = null
      $scope.selectedBudgetId = response.data.id
      true
    , (error) ->
      console.log "Unable to create the new budget"
      console.log error

  @updateSelectedBudget = ->
    data = _self.prepareData()
    $http.put("/budgets/#{_self.formBudget.id}.json", data).then (response) ->
      _self.budgets = _.map _self.budgets, (b) ->
        if b.id == _self.formBudget.id
          _self.formBudget
        else
          b
      _self.formBudget = null
      true
    , (error) ->
      console.log "Unable to update the budget"
      console.log error

  $scope.saveSelectedBudget = ->
    if _self.formBudget.id
      _self.updateSelectedBudget()
    else
      _self.createBudget()

  @calendarIsOpen = false
  @openCalendar = -> @calendarIsOpen = true

  @generateBudgetItems = (accountType) ->
    _.chain($scope.accounts).filter( (a) ->
      a.account_type == accountType
    ).map( (a) ->
      new BudgetItem(a, [0,0,0,0,0,0,0,0,0,0,0,0])
    ).value()

  @generateItems = () ->
    return [] unless _self.selectedBudget
    incomeItems = @generateBudgetItems 'income'
    expenseItems = @generateBudgetItems 'expense'
    [new HeaderItem('Income', incomeItems)].concat(
      incomeItems
    ).concat(
      [new HeaderItem('Expense', expenseItems)]
    ).concat(
      expenseItems
    )

  @loadBudgets = ->
    return unless $scope.currentEntityId
    $http.get("/entities/#{$scope.currentEntityId}/budgets.json").then (response) ->
      _self.budgets = response.data
      $scope.selectedBudgetId = _self.budgets[0].id if _self.budgets.length != 0
    , (error) ->
      console.log "Unable to get the budgets from the service."
      console.log error
  $scope.$watch 'currentEntityId', (_) -> _self.loadBudgets()
  $scope.$watch 'selectedBudgetId', (budgetId) ->
    _self.selectedBudget = null unless budgetId
    id = parseInt(budgetId)
    _self.selectedBudget = _.find(_self.budgets, (b) -> b.id == id)
    _self.items = _self.generateItems()
    return
  return
]

BudgetItem = (account, budgetItem) ->
  _self = this
  @account = account
  if @budgetItem
    @period = @budgetItem.periods
  else
    @periods = _.map [0..11], (_) ->
      {
        budget_amount: 0,
        start_date: new Date(2015, 0, 1)
      }
  @caption = -> @account.name
  @isHeader = false

class HeaderItem
  constructor: (@accountType, @items) ->
    @periods = _.map [0..11], (_) ->
      {
        budget_amount: 0,
        start_date: new Date(2015, 0, 1)
      }
  caption: -> @accountType
  isHeader: true

app.controller 'BudgetFormController', ['$scope', '$uibModalInstance', ($scope, $uibModalInstance) ->
  $scope.saveBudgetForm = ->
    $scope.saveSelectedBudget().then (succeeded) ->
      $uibModalInstance.close() if succeeded
  $scope.cancelBudgetForm = ->
    $uibModalInstance.dismiss('cancel')
  return
]

app.directive 'budgetManager', ->
  {
    restrict: 'E',
    templateUrl: '<%= asset_path('budget-manager.html') %>'
  }
