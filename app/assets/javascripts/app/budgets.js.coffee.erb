app = angular.module 'budgets', ['ui.bootstrap']

app.controller 'BudgetsController', ['$scope', '$http', '$uibModal', ($scope, $http, $uibModal) ->
  _self = this
  @budgets = []
  @selectedBuget = null
  @periods = []
  @incomeItems = []
  @expenseItems = []
  @periodsAreVisible = false
  @showPeriods = -> @periodsAreVisible = true
  @hidePeriods = -> @periodsAreVisible = false
  $scope.selectedBudgetId = null

  @new = ->
    _self.formBudget =
      period: "month"
      period_count: 12
    $scope.budgetFormTitle = "New budget"
    $uibModal.open {
      animation: true,
      templateUrl: 'budget-form.html',
      controller: 'BudgetFormController',
      scope: $scope
    }

  @edit = ->
    $scope.budgetFormTitle = "Edit budget"
    _self.formBudget = _.clone _self.selectedBudget
    $uibModal.open {
      animation: true,
      templateUrl: 'budget-form.html',
      controller: 'BudgetFormController',
      scope: $scope
    }

  @delete = ->
    $http.delete("/budgets/#{$scope.selectedBudgetId}.json").then (response) ->
      _self.budgets = _.reject(_self.budgets, (b) -> b.id == $scope.selectedBudgetId)
      if _self.budgets.length == 0
        $scope.selectedBudgetId = null
      else
        $scope.selectedBudgetId = _self.budgets[0].id
    , (error) ->
      console.log "Unable to delete the budget"
      console.log error

  @prepareData = ->
    {
      budget: _self.formBudget
    }
  @createBudget = ->
    data = _self.prepareData()
    $http.post("/entities/#{$scope.currentEntityId}/budgets.json", data).then (response) ->
      # insert at the correct position
      dates = _.map(_self.budgets, (b) -> b.start_date).reverse()
      index = _.sortedIndex(dates, response.data.start_date)
      index = dates.length - index
      _self.budgets.splice index, 0, response.data
      _self.formBudget = null
      $scope.selectedBudgetId = response.data.id
      true
    , (error) ->
      console.log "Unable to create the new budget"
      console.log error

  @updateSelectedBudget = ->
    data = _self.prepareData()
    $http.put("/budgets/#{_self.formBudget.id}.json", data).then (response) ->
      _self.budgets = _.map _self.budgets, (b) ->
        if b.id == _self.formBudget.id
          _self.formBudget
        else
          b
      _self.formBudget = null
      true
    , (error) ->
      console.log "Unable to update the budget"
      console.log error

  $scope.saveSelectedBudget = ->
    if _self.formBudget.id
      _self.updateSelectedBudget()
    else
      _self.createBudget()

  @selectedBudgetItemData = ->
    budget_item: $scope.selectedBudgetItem.budgetItem

  @createBudgetItem = ->
    $http.post("/budgets/#{$scope.selectedBudgetId}/items.json", _self.selectedBudgetItemData()).then (response) ->
      bi = _.find(_self.selectedBudget.items, (i) -> i.account.id == response.data.account_id)
      bi.budgetItem = response.data
      true
    , (error) ->
      console.log "Unable to create the budget item"
      console.log error
      false

  $scope.saveSelectedBudgetItem = ->
    if $scope.selectedBudgetItem.id
      _self.updateSelectedBudgetItem()
    else
      _self.createBudgetItem()

  @calendarIsOpen = false
  @openCalendar = -> @calendarIsOpen = true

  @editItem = (item) ->
    $scope.selectedBudgetItem = item
    $scope.selectedMethod = 'annual'
    $uibModal.open {
      animation: true,
      templateUrl: '<%= asset_path('budget-item-form.html') %>',
      controller: 'BudgetItemFormController',
      scope: $scope
    }
  @emptyPeriods = (startDate) ->
    _.chain(
      [0..11]
    ).map( (index) ->
      addMonths startDate, index
    ).map( (d) ->
      start_date: d
      budget_amount: 0
    ).value()

  @mapItems = (items) ->
    mappedItems = _.chain(
      $scope.accounts
    ).map( (a) ->
      existingItem = _.find(items, (i) -> i.account_id == a.id)
      workingItem = existingItem || {
        account_id: a.id
        periods: _self.emptyPeriods(parseDate(_self.selectedBudget.start_date), a.id)
      }
      new BudgetItem(a, workingItem)
    ).groupBy( (item) ->
      item.account.account_type
    ).value()

    _self.items = _.reduce(
      ['Asset', 'Liability', 'Equity', 'Income', 'Expense'],
      (list, type) ->
        typedItems = mappedItems[type.toLowerCase()] || []
        list.push new HeaderItem(type, typedItems, $scope.periods)
        list.concat typedItems
      , []
    )

  @generateItems = () ->
    $http.get("/budgets/#{$scope.selectedBudgetId}/items.json").then (response) ->
      _self.mapItems(response.data)
    , (error) ->
      console.log "Unable to get the budget items from the service."
      console.log error

  @loadBudgets = ->
    return unless $scope.currentEntityId
    $http.get("/entities/#{$scope.currentEntityId}/budgets.json").then (response) ->
      _self.budgets = response.data
      $scope.selectedBudgetId = _self.budgets[0].id if _self.budgets.length != 0
    , (error) ->
      console.log "Unable to get the budgets from the service."
      console.log error
  $scope.$watch 'currentEntityId', (_) -> _self.loadBudgets()
  $scope.$watch 'selectedBudgetId', (budgetId) ->
    if budgetId
      id = parseInt(budgetId)
      _self.selectedBudget = _.find(_self.budgets, (b) -> b.id == id)
      _self.generateItems()
      $scope.periods = _self.emptyPeriods(parseDate(_self.selectedBudget.start_date))
    else
      _self.selectedBudget = null
    return
  return
]

BudgetItem = (account, budgetItem) ->
  _self = this
  @total = ->
    _.reduce(_self.periods, (sum, p) ->
      sum + p.budget_amount
    , 0)
  @budgetItem = budgetItem
  @account = account
  @periods = budgetItem.periods
  @caption = @account.path
  @isHeader = false
  return

HeaderItem = (accountType, items, periods) ->
  _self = this
  @accountType = accountType
  @items = items
  @periods = _.map periods, (period, index) ->
    budgetAmount = _.chain(
      _self.items
    ).map( (i) ->
      i.periods[index]
    ).map( (p) ->
      p.budget_amount
    ).reduce( (sum, a) ->
      sum + a
    , 0).value()
    {
      budget_amount: budgetAmount
      start_date: period.start_date
    }
  @caption = @accountType
  @total = ->
    _.reduce(_self.periods, (sum, p) ->
      sum + p.budget_amount
    , 0)
  @isHeader = true
  return

app.controller 'BudgetFormController', ['$scope', '$uibModalInstance', ($scope, $uibModalInstance) ->
  $scope.saveBudgetForm = ->
    $scope.saveSelectedBudget().then (succeeded) ->
      $uibModalInstance.close() if succeeded
  $scope.cancelBudgetForm = ->
    $uibModalInstance.dismiss('cancel')
  return
]

app.controller 'BudgetItemFormController', ['$scope', '$uibModalInstance', ($scope, $uibModalInstance) ->
  $scope.monthlyAverage = 0

  $scope.saveBudgetItemForm = ->
    $scope.saveSelectedBudgetItem().then (succeeded) ->
      $uibModalInstance.close() if succeeded
  $scope.cancelBudgetItemForm = ->
    $uibModalInstance.dismiss('cancel')
  $scope.$watch 'selectedMethod', (method) ->
    if method == 'monthlyAverage'
      $scope.monthlyAverage = $scope.selectedBudgetItem.total() / $scope.selectedBudgetItem.periods.length
  $scope.applyMonthlyAverage = ->
    _.each($scope.selectedBudgetItem.periods, (p) -> p.budget_amount = $scope.monthlyAverage)
]

app.directive 'budgetManager', ->
  {
    restrict: 'E',
    templateUrl: '<%= asset_path('budget-manager.html') %>'
  }
