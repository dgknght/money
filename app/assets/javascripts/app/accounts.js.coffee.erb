app = angular.module 'accounts', ['ui.bootstrap']

app.controller 'AccountsController', ['$scope', '$http', '$uibModal', ($scope, $http, $uibModal) ->
  _self = this
  @types = ['Asset', 'Liability', 'Equity', 'Income', 'Expense']
  $scope.displayRecords = []
  @byType = (type, options) ->
    return [] unless type
    type = type.toLowerCase()
    c = _.chain $scope.accounts
    c = c.filter (a) ->
      a.account_type == type
    if options && options.except
      c = c.reject (a) ->
        a.id == options.except
    c = c.sortBy 'path'
    c.value()
  @formTypes = (options) ->
    return [] unless _self.formAccount
    _self.byType(_self.formAccount.account_type, options)

  @new = ->
    _self.formAccount = {}
    $scope.formTitle = "New account"
    modalInstance = $uibModal.open {
      animation: true,
      templateUrl: 'account-form.html',
      controller: 'AccountFormController',
      scope: $scope
    }
  @edit = (id) ->
    _self.formAccount = _.chain($scope.accounts).filter((a) -> a.id == id).first().value()
    $scope.formTitle = "Edit account"
    modalInstance = $uibModal.open {
      animation: true,
      templateUrl: 'account-form.html',
      controller: 'AccountFormController',
      scope: $scope
    }

  $scope.$watchCollection 'accounts', (accounts) ->
    _self.createDisplayRecords(accounts)

  $scope.save = ->
    if !!_self.formAccount.id then _self.update() else _self.create()

  @update = ->
    url = "accounts/#{_self.formAccount.id}.json"
    $http.put(url, _self.formAccount).then (result) ->
      updated = _.map $scope.accounts, (a) ->
        if a.id == result.id then result else a
      $scope.accounts = updated
      _self.createDisplayRecords $scope.accounts
    , (error) ->
      #TODO Show the error to the user
      console.log "Unable to save the updated account"
      console.log error

  @create = ->
    url = "entities/#{$scope.currentEntityId}/accounts.json"
    $http.post(url, _self.formAccount).then (result) ->
      $scope.accounts.push(result.data)
      true
    , (error) ->
      #TODO show an error to the user
      console.log "unable to save the new account"
      console.log error
      false

  @delete = (id) ->
    $http.delete("accounts/#{id}.json").then ->
      updated = _.reject $scope.accounts, (a) ->
        a.id == id
      $scope.accounts = updated
    , (error) ->
      #TODO Show this error as an alert
      console.log "Unable to delete the account"
      console.log error

  @createDisplayRecords = (accounts) ->
    $scope.displayRecords = _.chain(_self.types).reduce( (list, type) ->
      groupedAccounts = _.groupBy accounts, 'account_type'
      # Calculate the summary header
      typedAccounts = _.sortBy groupedAccounts[type.toLowerCase()], 'path'
      typeTotal = _.chain(typedAccounts).filter( (a) ->
        a.parent_id == null
      ).reduce((sum, account) ->
        sum + account.value + account.children_value
      , 0).value()
      list.push new HeaderDisplayRecord(type, typeTotal)

      # transform the accounts into display records
      _.each typedAccounts, (account) ->
        list.push new AccountDisplayRecord(account, $scope)

      list
    , []).value()

  return
]

AccountDisplayRecord = (account, scope) ->
  _self = this
  @isExpanded = false
  @isHidden = account.parent_id != null
  @account = account
  @scope = scope
  @id = -> @account.id
  @caption = -> @account.name
  @balance = -> @account.value + @account.children_value
  @isHeader = -> false
  @isLeaf = -> _.every(@scope.accounts, (a) -> a.parent_id != _self.account.id)
  @cssClass = ->"account_depth_#{@account.depth}"
  @_childRecords = ->
    _.chain(@scope.accounts).filter((a) ->
      a.parent_id == _self.account.id
    ).map((a) ->
      _self.scope.displayRecords.find((r) -> r.id() == a.id)
    ).value()
  @expand = ->
    _.each(_self._childRecords(), (a) ->
      a.isHidden = false
    )
    @isExpanded = true
    return
  @collapse = ->
    _.each(_self._childRecords(), (a) ->
      a.isHidden = true
    )
    @isExpanded = false
    return
  return

class HeaderDisplayRecord
  constructor: (type, total) ->
    @type = type
    @total = total
  id: ->
    null
  caption: ->
    @type
  balance: ->
    @total
  isHeader: ->
    true
  isLeaf: ->
    false
  isExpanded: ->
    true
  hidden: ->
    false
  cssClass: ->
    null

app.controller 'AccountFormController', ['$scope', '$uibModalInstance', ($scope, $uibModalInstance) ->
  $scope.ok = ->
    $scope.save().then (result) ->
      $uibModalInstance.close() if result
  $scope.cancel = ->
    $uibModalInstance.dismiss('cancel')
]

app.directive 'accountManager', ->
  {
    restrict: 'E',
    templateUrl: '<%= asset_path('account-manager.html') %>'
  }
