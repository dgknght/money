app = angular.module 'accounts', ['ui.bootstrap']

app.controller 'AccountsController', ['$scope', '$rootScope', '$http', '$uibModal', ($scope, $rootScope, $http, $uibModal) ->
  _self = this
  @types = ['Asset', 'Liability', 'Equity', 'Income', 'Expense']
  @accounts = []
  @displayRecords = []
  @byType = (type, options) ->
    return [] unless type
    type = type.toLowerCase()
    c = _.chain _self.accounts
    c = c.filter (a) ->
      a.account_type == type
    if options && options.except
      c = c.reject (a) ->
        a.id == options.except
    c = c.sortBy 'path'
    c.value()
  @formTypes = (options) ->
    return [] unless _self.formAccount
    _self.byType(_self.formAccount.account_type, options)

  @new = ->
    _self.formAccount = {}
    modalInstance = $uibModal.open {
      animation: true,
      templateUrl: 'account-form.html',
      controller: 'AccountFormController',
      scope: $scope
    }
  @edit = (id) ->
    _self.formAccount = _.chain(_self.accounts).filter((a) -> a.id == id).first().value()
    modalInstance = $uibModal.open {
      animation: true,
      templateUrl: 'account-form.html',
      controller: 'AccountFormController',
      scope: $scope
    }

  # Load the account list when the account manager is displayed
  $rootScope.$watch ->
    $rootScope.selectedSearchHandler == 'account-manager'
  , (selected) ->
    _self.loadAccounts()

  $scope.save = ->
    if !!_self.formAccount.id then _self.update() else _self.create()

  @loadAccounts = ->
    if $scope.currentEntity
      url = "/entities/#{$scope.currentEntity.id}/accounts.json"
      $http.get(url).then (response) ->
        _self.setAccounts response.data
      , (error) ->
        # TODO show the error to the user
        console.log "Unable to get the accounts from the service."
        console.log error
    else
      _self.setAccounts []

  @update = ->
    url = "accounts/#{_self.formAccount.id}.json"
    $http.put(url, _self.formAccount).then (result) ->
      updated = _.map _self.accounts, (a) ->
        if a.id == result.id then result else a
      _self.setAccounts updated
    , (error) ->
      #TODO Show the error to the user
      console.log "Unable to save the updated account"
      console.log error

  @create = ->
    url = "entities/#{$scope.currentEntity.id}/accounts.json"
    $http.post(url, _self.formAccount).then (result) ->
      _self.setAccounts result.data
      true
    , (error) ->
      #TODO show an error to the user
      console.log "unable to save the new account"
      console.log error
      false

  @delete = (id) ->
    $http.delete("accounts/#{id}.json").then ->
      updated = _.reject _self.accounts, (a) ->
        a.id == id
      _self.setAccounts updated
    , (error) ->
      #TODO Show this error as an alert
      console.log "Unable to delete the account"
      console.log error

  @setAccounts = (accounts) ->
    _self.accounts = accounts
    _self.createDisplayRecords()

  @createDisplayRecords = ->
    _self.displayRecords = _.chain(_self.types).reduce( (list, type) ->
      groupedAccounts = _.groupBy _self.accounts, 'account_type'
      # Calculate the summary header
      typedAccounts = _.sortBy groupedAccounts[type.toLowerCase()], 'path'
      typeTotal = _.chain(typedAccounts).filter( (a) ->
        a.parent_id == null
      ).reduce((sum, account) ->
        sum + account.value + account.children_value
      , 0).value()
      list.push {
        caption: type,
        balance: typeTotal,
        isHeader: true,
        cssClass: null
      }

      # transform the accounts into display records
      _.each typedAccounts, (account) ->
        list.push {
          id: account.id,
          caption: account.name,
          balance: account.value + account.children_value,
          isHeader: false,
          cssClass: "account_depth_#{account.depth}"
        }

      list
    , []).value()

  return
]

app.controller 'AccountFormController', ['$scope', '$uibModalInstance', ($scope, $uibModalInstance) ->
  $scope.ok = ->
    $scope.save().then (result) ->
      $uibModalInstance.close() if result
  $scope.cancel = ->
    $uibModalInstance.dismiss('cancel')
]

app.directive 'accountManager', ->
  {
    restrict: 'E',
    templateUrl: '<%= asset_path('account-manager.html') %>'
  }
